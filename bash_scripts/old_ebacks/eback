#!/bin/bash

# Not backing up dirs and their parents from the same FS to artificially
# double the preceived size required for a backup is (mostly) the job of the user

if [[ "$(whoami)" != "root" ]]; then
	echo "This must be run as root."
	exit 0
fi

main() {
	

	

	

	# TODO: -a) Adding directories to the backups
	#	-r) Removing directories from the backups
	#	-i) Printing out info about all the backups
	#	-g) Printing out info about how the backups are spread across what devices
	#	*) Create the logic that actually backs stuff up efficiently
	#	-s) Rescan device data
	#	-h) Help command
	#	-q) Quit
	#	*) Make executable program that gets put in crontab and does the actual backing up (probably same as previous *)
	#	l) Print when the last backup occurred
	#	d) Display what dirs are backed up & which devices are currently being used for backups

	# BEGIN: Main input loop

	running=1
	while [ $running -eq 1 ]; do
		read -p "Command (h for help): " input

		case ${input:0:1} in
		a)
			add_directory ${input:2:${#input}}
			;;
		r)
			remove_directory ${input:2:${#input}}
			;;
		i)
			print_device_info
			;;
		g)
			print_bar_info
			;;
		s)
			scan_devices
			print_device_info
			;;
		d)
			big_information
			;;
		l)
			if [[ -f "$lastback_stamp_loc" ]]; then 
				echo -n "The last system backup occurred on: "
				cat $lastback_stamp_loc 
			else
				echo "The system has not been backed up yet."
			fi
			;;
		h)
			help_message
			;;
		q)
			echo "Goodbye."
			exit_fxn
			exit 0
			;;
		*)
			echo "$input: Unknown command."
			;;
		esac
	done
}

big_information() {
	i=1
	directories=()

	while IFS= read -r line; do
		if [[ "${line:0:4}" == "Dir:" ]]; then
			new=true
			new_dir=`echo $line | cut -d':' -f2`
			for dir in ${directories[@]}; do
				if [[ "$dir" == "$new_dir" ]]; then
					new=false
					break
				fi
			done

			if [[ "$new" == "false" ]]; then continue; fi

			directories=(${directories[@]} $new_dir)
		fi

		i=$((i+1))
	done < "$reservedata_loc"

	out_strings=()
	n_out_strings=0

	for dir in ${directories[@]}; do
		lines=(`grep -nx "Dir:$dir" $reservedata_loc | cut -d':' -f1`)
		devices=()

		for line in ${lines[@]}; do
			device=`awk "NR==$(($line + 2))" $reservedata_loc | cut -d':' -f2`
			len=`expr length "$device"`
			device=${device:1:$(($len - 2))}

			new=true
			for d in ${devices[@]}; do
				[[ "$device" == "$d" ]] && new=false
			done

			[[ "$new" == "false" ]] && continue
			devices=(${devices[@]} $device)
		done

		echo -en "\e[36m${dir}\e[0m\n"

		for d in ${devices[@]}; do
			if [[ "$d" == "${devices[$((${#devices[@]} - 1))]}" ]]; then
				echo -en "\e[0m[\e[33m${d}\e[0m]"
			else
				echo -en "\e[0m[\e[33m${d}\e[0m], "
			fi
		done

		echo
	done
}



print_bar_info() {
	for i in $(seq 0 $((${#devs[@]} - 1))); do
		device=${devs[$i]}
		total_size=${dev_sizes[$i]}
		make_readable $total_size
		total_readable=$retval
		pre_reserved=${dev_reserved[$i]}

		echo -e "\t╔ ${dev_labels[$i]} [\e[33m${dev_IDs[$i]}\e[0m]"

		p_start=`echo "scale=3; (($pre_reserved / $total_size) * 20)" | bc | cut -d'.' -f1`
		[[ "$p_start" == "" ]] && p_start=0

		p_end=$((20 - $p_start))

		out_bar="\e[31m"
		for j in $(seq 1 $p_start); do out_bar="${out_bar}▒" ; done
		out_bar="${out_bar}\e[0m"
		for j in $(seq 1 $p_end); do out_bar="${out_bar}░" ; done

		echo -e "$device:\t║ [ ${out_bar} ] $total_readable"

		make_readable $pre_reserved
		pre_readable=$retval
		end_val=$(($total_size - $pre_reserved))
		make_readable $end_val
		end_readable=$retval

		printf "\t╚   "
		[[ $p_start -ne 0 ]] && printf "\e[31m%*s" $p_start $pre_readable

		if [[ $p_end -ne 0 ]]; then
			m_len=`expr length $pre_readable`
			overlap=$(($s_len - $p_start))
			[[ $p_start -eq 0 || $overlap -lt 0 ]] && overlap=0
			printf "\e[0m%*s" $(($p_end - $overlap)) $end_readable
		fi

		printf "\e[0m\n"
		[[ $i -ne $((${#devs[@]} - 1)) ]] && echo
	done

}

remove_directory() {
	# Usage: $0 [/directory/]

	if [[ "$1" != "" && -d "$1" ]]; then
		input_dir=`readlink -f $1`
		echo -e "\e[33m$input_dir\e[0m selected."
	else
		trying=1
		while [ $trying -eq 1 ]; do
			read -p "Directory: " input_dir
			input_dir=`readlink -f $input_dir`
			if [[ -d "$input_dir" ]]; then
				echo -e "\e[31m$input_dir\e[0m selected."
				break
			else
				echo "Invalid directory [${input_dir}], try again."
			fi
		done
	fi

	grep_res=(`cat $reservedata_loc | grep -nx "Dir:$input_dir"`)
	if [[ "$grep_res" == "" ]]; then
		echo "There don't appear to be any backups of this directory currently setup."
		return 0
	else
		read -p "Are you sure you'd like to remove $input_dir from the backup system? [y/N] " answer

		shopt -s nocasematch
		if [[ "$answer" == "y" || "$answer" == "yes" ]]; then
			:
		else
			echo -e "\e[31mAborting.\e[0m"
			return 0
		fi
		shopt -u nocasematch


		[[ -f "${reservedata_loc}.tmp" ]] && rm -f ${reservedata_loc}.tmp &> /dev/null
		cp $reservedata_loc ${reservedata_loc}.tmp

		for i in $(seq 0 $((${#grep_res[@]} - 1))); do
			line_number=`echo ${grep_res[$i]} | cut -d':' -f1`
			line_number=$(($line_number - (i * 3)))

			for i in 1 2 3; do
				sed "${line_number}d" ${reservedata_loc}.tmp >> ${reservedata_loc}.tmp.tmp
				rm ${reservedata_loc}.tmp
				mv ${reservedata_loc}.tmp.tmp ${reservedata_loc}.tmp
			done
		done

		cat ${reservedata_loc}.tmp > $reservedata_loc
		rm ${reservedata_loc}.tmp &> /dev/null
		rm ${reservedata_loc}.tmp.tmp &> /dev/null

		echo -e "\e[33m${input_dir}\e[0m has been \e[31mremoved\e[0m from the backup system."
	fi

	reload_reservations
}

add_directory() {
	# Usage: $0 [/directory/]

	if [[ "$1" != "" && -d "$1" ]]; then
		input_dir=`readlink -f $1`
		echo -e "\e[33m$input_dir\e[0m selected."
	else
		[[ "$1" != "" ]] && echo "Invalid directory [${input_dir}], try again."

		trying=1
		while [ $trying -eq 1 ]; do
			read -p "Directory: " input_dir
			input_dir=`readlink -f $input_dir`
			if [[ -d "$input_dir" ]]; then
				echo -e "\e[33m$input_dir\e[0m selected."
				break
			else
				echo "Invalid directory [${input_dir}], try again."
			fi
		done
	fi

	parent=`echo $input_dir | cut -d'/' -f2`
	parent="/$parent"
	[[ "$input_dir" == "/" ]] && parent="/"
	grep_res=`cat $reservedata_loc | grep -x "Dir:$parent"`
	[[ "$grep_res" == "" ]] && grep_res=`cat $reservedata_loc | grep -x $input_dir`

	if [[ "$grep_res" != "" ]]; then
		echo -e "\e[33mWARNING:\e[0m It looks like \e[31m$input_dir\e[0m or one of its parents is already backed up."
		echo -n "Would you like to continue regardless? [y/N] "
		read answer

		shopt -s nocasematch
		if [[ "$answer" == "y" || "$answer" == "yes" ]]; then
			:
		else
			echo -e "\e[31mAborting.\e[0m"
			return 0
		fi
		shopt -u nocasematch
	fi

	size=`df $input_dir | awk ' { print $2 } ' | cut -d$'\n' -f 2 | cut -d '%' -f 1`
	if [[ $size -lt 100 ]]; then
		echo -e "\e[31mERROR:\e[0m This filesystem is too small."
		return 0
	fi
	size=`echo ${size}K | numfmt --from=iec --to=none`

	make_readable $size
	readable_size="$retval"

	total=0

	if [[ $total -lt $size ]]; then
		make_readable $total
		echo "$readable_size is required to backup $input_dir, but only $retval is available from the scanned devices."
		return 0
	fi

	alloc=0
	selections=()

	while [ $alloc -lt $size ]; do
		print_size_selections $selections

		make_readable $alloc
		echo -e "${retval}/${readable_size}"

		valid=false
		while [ "$valid" == "false" ]; do # make sure input is an integer
			echo -en "\e[33mSelect device(s): \e[0m"
			read sel

			if [[ "$sel" =~ ^[0-9]+$ ]]; then
				valid=true

				for i in $(seq 0 $((${#selections[@]} - 1))); do
					if [[ $(($sel - 1)) -eq ${selections[$i]} ]]; then
						echo "That device was already selected, pick another."
						valid=false
					fi
				done
			fi
		done

		alloc=$((alloc + ${dev_remaining[$(($sel - 1))]}))
		selections=(${selections[@]} $(($sel - 1)))
	done

	tmpdata=`mktemp`

	# Order: Dir, Size, Dev (ID)
	#   Dir:/home/
	#   Size:8001563217920
	#   Device:"16a0b86e-73ca-41bc-991e-e04a915ba713"

	sum=0
	for i in $(seq 0 $((${#selections[@]} - 1))); do
		if [[ $i -eq $((${#selections[@]} - 1)) ]]; then
			printf "Dir:${input_dir}\nSize:$(($size - $sum))\nDevice:\"${dev_IDs[${selections[$i]}]}\"\n" >> $tmpdata
		else
			sum=$(($sum + ${dev_remaining[${selections[$i]}]}))
			[[ ${dev_remaining[${selections[$i]}]} -gt $REM_MIN ]] && printf "Dir:${input_dir}\nSize:${dev_remaining[${selections[$i]}]}\nDevice:\"${dev_IDs[${selections[$i]}]}\"\n" >> $tmpdata
		fi
	done

	echo -e "\e[31mPlease confirm your following choices:\e[0m"

	for i in $(seq 0 $((${#selections[@]} - 1))); do
		device=${devs[${selections[$i]}]}
		remaining=${dev_remaining[${selections[$i]}]}
		total_size=${dev_sizes[${selections[$i]}]}
		make_readable $total_size
		total_readable=$retval
		pre_reserved=${dev_reserved[${selections[$i]}]}

		p_start=`echo "scale=3; (($pre_reserved / $total_size) * 20)" | bc | cut -d'.' -f1`
		[[ "$p_start" == "" ]] && p_start=0

		[[ $i -eq $((${#selections[@]} - 1)) ]] && p_middle=`echo "scale=3; (($size - $sum) / $total_size) * 20" | bc | cut -d'.' -f1` || p_middle=$((20 - $p_start))
		[[ $p_middle -eq 0 ]] && p_middle=1
		p_end=$((20 - ($p_start + $p_middle)))

		out_bar="\e[31m"
		for j in $(seq 1 $p_start); do out_bar="${out_bar}▒" ; done
		out_bar="${out_bar}\e[33m"
		for j in $(seq 1 $p_middle); do out_bar="${out_bar}▓" ; done
		out_bar="${out_bar}\e[0m"
		for j in $(seq 1 $p_end); do out_bar="${out_bar}░" ; done

		echo -e "${device}:\t[ ${out_bar} ] $total_readable"

		make_readable $pre_reserved
		pre_readable=$retval
		[[ $i -eq $((${#selections[@]} - 1)) ]] && mid_val=$(($size - $sum)) || mid_val=$(($total_size - $pre_reserved))
		make_readable $mid_val
		mid_readable=$retval
		end_val=$(($total_size - ($pre_reserved + $mid_val)))
		make_readable $end_val
		end_readable=$retval

		printf "\t  "
		[[ $p_start -ne 0 ]] && printf "\e[31m%*s" $p_start $pre_readable

		if [[ $p_middle -ne 0 ]]; then
			s_len=`expr length $pre_readable`
			overlap=$(($s_len - $p_start))
			[[ $p_start -eq 0 || $overlap -lt 0 ]] && overlap=0
			printf "\e[33m%*s" $(($p_middle - $overlap)) $mid_readable
		fi

		if [[ $p_end -ne 0 ]]; then
			m_len=`expr length $mid_readable`
			overlap=$((($s_len + $m_len) - ($p_start + $p_middle)))
			[[ $p_middle -eq 0 || $overlap -lt 0 ]] && overlap=0
			printf "\e[0m%*s" $(($p_end - $overlap)) $end_readable
		fi

		printf "\e[0m\n"
	done

	echo -en "\e[33mFinalize?\e[0m [y/N] "
	read answer

	shopt -s nocasematch
	if [[ "$answer" == "y" || "$answer" == "yes" ]]; then
		echo -e "\e[33mPushing data.\e[0m"
		cat $tmpdata >> $reservedata_loc

		reload_reservations

		save_data
		load_data
	else
		echo -e "\e[31mAborting.\e[0m"
	fi
	shopt -u nocasematch

	rm $tmpdata
}


reload_reservations() {
	for i in $(seq 0 $((${#devs[@]} - 1))); do
		grep_res=(`cat $reservedata_loc | grep -n ${dev_IDs[$i]} | cut -d':' -f1`)
		if [[ "$grep_res" != "" ]]; then
			reserved_size=0
			for k in $(seq 0 $((${#grep_res[@]} - 1))); do
				reserved_size=$((reserved_size + `cat $reservedata_loc | sed -n "$((${grep_res[$k]} - 1))p" | cut -d':' -f2 | numfmt --from=iec --to=none`))
			done

			dev_reserved[$i]=$reserved_size
		else
			reserved_size=0
			dev_reserved[$i]=0
		fi

		dev_remaining[$i]=$((${dev_sizes[$i]} - $reserved_size))
	done
}

print_size_selections() {
	# Usage: $0 [devices to exclude]

	printf "Options:\n"
	for i in $(seq 0 $((${#devs[@]}-1))); do
		make_readable ${dev_remaining[$i]}
		mark=$((i+1))
		for j in $(seq 0 $((${#selections[@]}-1))); do
			[[ ${selections[j]} -eq $i ]] && mark="X" || :
		done

		printf "\t${mark}: ${dev_labels[$i]}, ${retval}\n"
	done
}

scan_devices() {
	potential_devs=()
	devs=()
	dev_IDs=()
	dev_labels=()
	dev_sizes=()
	dev_reserved=()
	dev_remaining=()

	set_potential_devs
	tmpdir=`mktemp -d`

	for device in ${potential_devs[@]}; do
		status=`mount | grep $device`

		printf "Scanning /dev/$device...\t"
		if [[ "$status" == "" ]]; then
			MOUNTED_DEV="/dev/$device"

			if [[ !$UNSAFE_SCAN ]]; then
				count=`ps aux | grep "mount ${MOUNTED_DEV}" | wc -l`
				if [[ $count -ge 2 ]]; then
					printf "Failed; it looks like ${MOUNTED_DEV} is being mounted elsewhere.\n\t\t\tTo attempt to mount ${MOUNTED_DEV} regardless, use -u\n"
					continue
				fi
			fi

			ret=`mount /dev/$device $tmpdir &> /dev/null`
			if [[ $ret -ne 0 ]]; then
				echo "Failed, $ret"
				umount /dev/$device &> /dev/null
				MOUNTED_DEV=""
			elif [[ ! -f "$tmpdir/check_stamp.nat" ]]; then
				echo "Not properly formatted"
				umount /dev/$device &> /dev/null
				MOUNTED_DEV=""
			else
				size=`df $tmpdir | awk ' { print $2 } ' | cut -d$'\n' -f 2 | cut -d '%' -f 1`
				no_K_size=`echo ${size}K | numfmt --from=iec --to=none` # df displays disk space in 1K blocks, we want it strictly in bytes
#				dev_sizes=(${dev_sizes[@]} $no_K_size)

#				devs=(${devs[@]} $device)
				dev_ID=`ls -l /dev/disk/by-uuid | grep $device | awk '{print $9}'`
#				dev_IDs=(${dev_IDs[@]} $dev_ID)

				label=`ls -l /dev/disk/by-label | grep $device | awk '{print $9}'`
				if [[ "$label" == "" ]]; then label="No\x20label\x20found"; fi
#				dev_labels=(${dev_labels[@]} $label)

				grep_res=(`cat $reservedata_loc | grep -n $dev_ID | cut -d':' -f1`)
				if [[ "$grep_res" != "" ]]; then
					reserved_size=0
					for k in $(seq 0 $((${#grep_res[@]} - 1))); do
						reserved_size=$((reserved_size + `cat $reservedata_loc | sed -n "$((${grep_res[$k]} - 1))p" | cut -d':' -f2 | numfmt --from=iec --to=none`))
					done

					if [[ $(($no_K_size - $reserved_size)) -lt $REM_MIN ]]; then
						umount $tmpdir
						MOUNTED_DEV=""
						echo -e "\e[33mFull\e[0m"
						continue
					fi

					dev_reserved=(${dev_reserved[@]} $reserved_size)
				else
					reserved_size=0
					dev_reserved=(${dev_reserved[@]} 0)
				fi

				devs=(${devs[@]} $device)
				dev_sizes=(${dev_sizes[@]} $no_K_size)
				dev_IDs=(${dev_IDs[@]} $dev_ID)
				dev_labels=(${dev_labels[@]} $label)
				dev_remaining=(${dev_remaining[@]} $(($no_K_size - $reserved_size)))

				echo "Formatted"

				umount $tmpdir
				MOUNTED_DEV=""
			fi
		else
			echo "Failed because this device is already mounted."
		fi
	done

	date +%s > $timestamp_loc
	save_data

	rmdir $tmpdir
}











make_readable() {
	# Usage: $0 <bytes>[K]
	# Legible value returned via $retval

	if [[ "$1" == *"K" ]]; then
		retval=`echo $1 | numfmt --from=iec --to=iec`
	else
		retval=`echo $1 | numfmt --from=none --to=iec`
	fi

	return 0
}

sig_close() {
	echo
	printf "SIGINT, SIGTERM or SIGHUP received, exiting..."

	exit_fxn

	printf " goodbye.\n"
	exit 0
}

exit_fxn() {
	rm $tmpdir &> /dev/null
	rm $tmpdata &> /dev/null
	[[ "$MOUNTED_DEV" != "" ]] && umount $MOUNTED_DEV &> /dev/null || :

	i=1
	while IFS= read -r line; do
		rem=`echo $line | cut -d'$' -f6`
		if [[ $rem -lt $REM_MIN ]]; then
			sed "${i}d" $devdata_loc >> ${devdata_loc}.tmp
			rm $devdata_loc
			mv ${devdata_loc}.tmp $devdata_loc
			i=$((i-1))
		fi

		i=$((i+1))
	done < "$devdata_loc"
}

main "$@"
